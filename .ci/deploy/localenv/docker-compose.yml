# https://github.com/compose-spec/compose-spec/blob/master/spec.md#extension
x-common-healthcheck-params: &common-healthcheck-params
  interval: 1m
  timeout: 10s
  retries: 3
  start_period: 2m  # Probe failure during start will not be counted towards the maximum number of retries
  start_interval: 5s

name: opendut

services:
  keycloak-postgres:
    container_name: opendut-keycloak-postgres
    image: "postgres:14.15"
    restart: unless-stopped
    healthcheck:
      <<: *common-healthcheck-params
      test: [ "CMD", "pg_isready", "--quiet", "--dbname=postgres", "--username=postgres" ]
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
      - keycloak_postgres_backup:/var/lib/postgresql/backup
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=$KEYCLOAK_POSTGRES_PASSWORD
      - POSTGRES_DB=keycloak
      - POSTGRES_HOST=postgres
    labels:
      - logging=promtail
      - logging_job=keycloak-postgres
    networks:
      - opendut_local

  keycloak:
    container_name: opendut-keycloak
    build:
      context: ../../..
      dockerfile: ./.ci/deploy/localenv/data/keycloak/Dockerfile-keycloak-server
      args:
        KEYCLOAK_VERSION: 22.0.2
    #command: ['start', '--optimized']
    restart: unless-stopped
    depends_on:
      - keycloak-postgres
      - traefik
    # this healthcheck requires the init container for provisioning
    healthcheck:
      <<: *common-healthcheck-params
      test: [ "CMD-SHELL", "curl --fail --silent --output /dev/null --noproxy '*' http://localhost:8080/realms/provisioning-done || exit 1" ]
    environment:
    - JAVA_OPTS_APPEND=-Dkeycloak.profile.feature.upload_scripts=enabled
    - KC_DB_PASSWORD=$KEYCLOAK_POSTGRES_PASSWORD
    - KC_DB_URL=jdbc:postgresql://keycloak-postgres/keycloak
    - KC_DB_USERNAME=postgres
    - KC_HEALTH_ENABLED=true
    - KC_HTTP_ENABLED=true
    - KC_METRICS_ENABLED=true
    - KC_HOSTNAME=auth.opendut.local
    - KC_PROXY=edge # reencrypt
    - KC_PROXY_ADDRESS_FORWARDING=true
    - KC_HOSTNAME_STRICT=false
    - KEYCLOAK_ADMIN=admin
    - KEYCLOAK_ADMIN_PASSWORD
    labels:
      - traefik.enable=true
      - "traefik.http.routers.keycloak.rule=Host(`auth.opendut.local`)"
      - "traefik.http.routers.keycloak.tls=true"
      - logging=promtail
      - logging_job=keycloak
    networks:
      - opendut_local

  init_keycloak:
    container_name: opendut-keycloak-init
    build:
      context: ../../..
      dockerfile: .ci/deploy/localenv/data/keycloak/Dockerfile-keycloak-provision
      args:
        KEYCLOAK_VERSION: 22.0.2
    depends_on:
      keycloak:
        condition: service_started
    # uncomment this to stop container after provisioning is done
    command: [ "sleep" ]
    # for fast update of provisioning the scripts are mounted as volumes
    volumes:
      - ./../../docker/keycloak/keycloak_functions.sh:/keycloak_functions.sh
      - ./data/keycloak/provision.sh:/provision.sh
    environment:
      - KCADM_PATH=/opt/keycloak/bin/kcadm.sh
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD
      - NETBIRD_MANAGEMENT_CLIENT_SECRET
      - OPENDUT_CARL_NETWORK_OIDC_CLIENT_SECRET
      - OPENDUT_CLEO_NETWORK_OIDC_CLIENT_SECRET
      - OPENDUT_EDGAR_NETWORK_OIDC_CLIENT_SECRET
      - OPENDUT_USER_OPENDUT
      - NETBIRD_PASSWORD
    labels:
      - logging=promtail
      - logging_job=keycloak-init
    networks:
      opendut_local:

  # Public web entrypoint exposed to end users
  traefik:
    container_name: opendut-traefik
    image: docker.io/traefik:v2.10.4
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --providers.docker
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --ping=true
      - --providers.docker.exposedByDefault=false
      # Redirect to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      # https://doc.traefik.io/traefik/observability/logs/#level default level=ERROR
      - "--log.level=INFO"
      - "--log.format=json"
      # https://doc.traefik.io/traefik/observability/access-logs/#format default is no access log
      - "--accesslog"
      - "--accesslog.format=json"
    environment:
      - "LEGO_CA_CERTIFICATES=/pki/insecure-development-ca.pem"
    ports:
      - "127.0.0.1:8080:8080"
      - "80:80"
      - "443:443"
    healthcheck:
      <<: *common-healthcheck-params
      #test: ["CMD", "traefik", "healthcheck", "--ping"]
      test: ["CMD", "wget", "-q", "--proxy", "off", "--spider", "http://localhost:8080/ping"]
    volumes:
      - ./data/traefik/config:/etc/traefik/dynamic:ro
      - ./data/secrets/pki/:/pki
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - logging=promtail
      - logging_job=traefik
    networks:
      opendut_local:
        aliases:
          - opendut.local
          - netbird.opendut.local
          - netbird-api.opendut.local
          - auth.opendut.local
          - signal.opendut.local
          - opentelemetry.opendut.local

# vaguely derived from: https://github.com/netbirdio/netbird/blob/main/infrastructure_files/docker-compose.yml.tmpl.traefik
  netbird-dashboard:
    container_name: opendut-netbird-dashboard
    image: netbirdio/dashboard:v2.5.0
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
      keycloak:
        condition: service_healthy
    environment:
      # Endpoints
      - NETBIRD_MGMT_API_ENDPOINT=https://netbird-api.opendut.local
      - NETBIRD_MGMT_GRPC_API_ENDPOINT=https://netbird-api.opendut.local
      # OIDC
      - AUTH_AUDIENCE=netbird-client
      - AUTH_CLIENT_ID=netbird-client
      - AUTH_CLIENT_SECRET=
      - AUTH_AUTHORITY=https://auth.opendut.local/realms/netbird
      - USE_AUTH0=false
      - AUTH_SUPPORTED_SCOPES=openid profile email offline_access api
      - AUTH_REDIRECT_URI=
      - AUTH_SILENT_REDIRECT_URI=
    healthcheck:
      <<: *common-healthcheck-params
      test: [ "CMD-SHELL", "curl --fail --silent --output /dev/null --noproxy '*' http://localhost || exit 1" ]
    labels:
      - traefik.enable=true
      - traefik.http.routers.netbird-dashboard.rule=Host(`netbird.opendut.local`)
      - traefik.http.routers.netbird-dashboard.tls=true
      - traefik.http.services.netbird-dashboard.loadbalancer.server.port=80
      - logging=promtail
      - logging_job=netbird-dashboard

    networks:
      - opendut_local

  # Signal
  netbird-signal:
    container_name: opendut-netbird-signal
    image: netbirdio/signal:0.28.9
    restart: unless-stopped
    volumes:
      - netbird-signal:/var/lib/netbird
    labels:
      - traefik.enable=true
      - traefik.http.routers.netbird-signal.rule=Host(`signal.opendut.local`)
      - traefik.http.services.netbird-signal.loadbalancer.server.port=80
      - traefik.http.services.netbird-signal.loadbalancer.server.scheme=h2c
      - logging=promtail
      - logging_job=netbird-signal
    networks:
      - opendut_local

  # Management
  netbird-management:
    container_name: opendut-netbird-management
    build:
      context: ../../..
      dockerfile: ./.ci/deploy/localenv/data/netbird/Dockerfile_management
      args:
        NETBIRD_MANAGEMENT_VERSION: "0.28.9"
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
      netbird-dashboard:
        condition: service_started
      keycloak:
        condition: service_healthy
    volumes:
      - ./data/secrets/pki/:/pki/:ro
      - ./data/secrets/pki/insecure-development-ca.pem:/usr/local/share/ca-certificates/insecure-development-ca.crt:ro
      - ./data/netbird/config/:/config/:ro
      - netbird-mgmt-data:/var/lib/netbird
      - netbird-mgmt-config:/etc/netbird/
    environment:
      # Keycloak user
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD
      # CURL
      - CURL_CA_BUNDLE=/usr/local/share/ca-certificates/insecure-development-ca.crt
      # Netbird management is GO, GO uses SSL_CERT_FILE environment variable, see https://go.dev/src/crypto/x509/root_unix.go
      - SSL_CERT_FILE=/usr/local/share/ca-certificates/insecure-development-ca.crt
      - KEYCLOAK_URL=https://auth.opendut.local
      - NETBIRD_MANAGEMENT_URL=https://netbird-api.opendut.local
      - NETBIRD_MANAGEMENT_DOMAIN=netbird.opendut.local
      - KEYCLOAK_REALM_URL=https://auth.opendut.local/realms/netbird/.well-known/openid-configuration
      # URLs
      - NETBIRD_SIGNAL_STUN_URL=signal.opendut.local:443
      - NETBIRD_SIGNAL_DOMAIN=signal.opendut.local
      - NETBIRD_SIGNAL_PROTOCOL=http
      - NETBIRD_SIGNAL_PORT=443
      - TURN_DOMAIN=opendut.local
      - TURN_USER=self
      - TURN_PASSWORD
      - TURN_PORT=3478
      - NETBIRD_DATASTORE_ENC_KEY
      - NETBIRD_ISSUER_URL=https://auth.opendut.local/realms/netbird
      - NETBIRD_ISSUER_DOMAIN=auth.opendut.local
      - NETBIRD_ISSUER_ADMIN_URL=https://auth.opendut.local/admin/realms/netbird
      - NETBIRD_MANAGEMENT_CLIENT_ID=netbird-backend
      - NETBIRD_MANAGEMENT_CLIENT_SECRET
      - NETBIRD_MANAGEMENT_DEVICE_ID=netbird-client
      - NETBIRD_PASSWORD

    healthcheck:
      <<: *common-healthcheck-params
      test: ["CMD-SHELL", "/netbird-management-health.sh"]
    labels:
      - traefik.enable=true
      # Netbird API REST endpoint
      - traefik.http.routers.netbird-api.rule=Host(`netbird-api.opendut.local`) && PathPrefix(`/api`)
      - traefik.http.routers.netbird-api.service=netbird-api
      - traefik.http.routers.netbird-api.tls=true
      - traefik.http.services.netbird-api.loadbalancer.server.port=80
      # Netbird API GRPC endpoint
      - traefik.http.routers.netbird-management.rule=Host(`netbird-api.opendut.local`) && PathPrefix(`/management.ManagementService/`)
      - traefik.http.routers.netbird-management.service=netbird-management
      - traefik.http.routers.netbird-management.tls=true
      - traefik.http.services.netbird-management.loadbalancer.server.port=80
      - traefik.http.services.netbird-management.loadbalancer.server.scheme=h2c
      # Logging
      - logging=promtail
      - logging_job=netbird-management
    networks:
      - opendut_local

  # Coturn
  netbird-coturn:
    container_name: opendut-netbird-coturn
    # https://hub.docker.com/r/coturn/coturn/tags
    # https://github.com/coturn/coturn/tree/master/docker/coturn#why-so-many-ports-opened
    image: coturn/coturn:4.6.2
    restart: unless-stopped
    domainname: opendut.local
    volumes:
      - ./data/coturn/:/coturn/:ro
    environment:
      - TURN_REALM=opendut.local
      - TURN_DOMAIN=opendut.local
      - TURN_USER=self
      - TURN_PASSWORD
      - TURN_PORT=3478
    network_mode: host  # only container using network host mode
    labels:
      - logging=promtail
      - logging_job=netbird-coturn
    entrypoint: ["/coturn/entrypoint.sh"]
    # turnutils_uclient -T -p $TURN_PORT -u $TURN_USER -w $TURN_PASSWORD localhost
    healthcheck:
      <<: *common-healthcheck-params
      test: ["CMD-SHELL", "turnutils_uclient -T -p $$TURN_PORT -u $$TURN_USER -w $$TURN_PASSWORD localhost"]

  carl-postgres:
    container_name: opendut-carl-postgres
    image: "postgres:14.15"
    restart: unless-stopped
    healthcheck:
      <<: *common-healthcheck-params
      test: [ "CMD", "pg_isready", "--quiet", "--dbname=postgres", "--username=postgres" ]
    volumes:
      - carl_postgres_data:/var/lib/postgresql/data
    labels:
      - logging=promtail
      - logging_job=carl-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=$CARL_POSTGRES_PASSWORD
      - POSTGRES_DB=carl
      - POSTGRES_HOST=postgres
    networks:
      - opendut_local

  carl:
    container_name: opendut-carl
    image: "ghcr.io/eclipse-opendut/opendut-carl:0.3.1"
    command: ["/opt/opendut-carl/opendut-carl"]
    restart: unless-stopped
    depends_on:
      carl-postgres:
        condition: service_healthy
      traefik:
        condition: service_started
      keycloak:
        condition: service_healthy
    volumes:
      # CUSTOM ENTRYPOINT
      - "./data/carl/entrypoint.sh:/opt/entrypoint.sh"
      - "./data/carl/carl_functions.sh:/opt/carl_functions.sh"
      # CERTIFICATES
      - "./data/secrets/pki/insecure-development-ca.pem:/etc/opendut/tls/ca.pem"
      - "./data/secrets/pki/deploy/carl.opendut.local.pem:/etc/opendut/tls/carl.pem"
      - "./data/secrets/pki/deploy/carl.opendut.local.key:/etc/opendut/tls/carl.key"
      - carl-config:/opt/opendut-carl/config/
    environment:
      # Network
      - OPENDUT_CARL_NETWORK_REMOTE_HOST=carl.opendut.local
      - OPENDUT_CARL_NETWORK_REMOTE_PORT=443
      - OPENDUT_CARL_NETWORK_BIND_PORT=443
      - OPENDUT_CARL_NETWORK_TLS_CA=/etc/opendut/tls/ca.pem
      # CURL
      - CURL_CA_BUNDLE=/etc/opendut/tls/ca.pem
      - SSL_CERT_FILE=/etc/opendut/tls/ca.pem
      # VPN
      - OPENDUT_CARL_VPN_ENABLED=true
      - OPENDUT_CARL_VPN_KIND=netbird
      - OPENDUT_CARL_VPN_NETBIRD_CA=/etc/opendut/tls/ca.pem
      - OPENDUT_CARL_VPN_NETBIRD_URL=https://netbird-api.opendut.local/api
      - OPENDUT_CARL_VPN_NETBIRD_AUTH_TYPE=personal-access-token
      # OpenTelemetry
      - OPENDUT_CARL_OPENTELEMETRY_ENABLED=true
      - OPENDUT_CARL_OPENTELEMETRY_COLLECTOR_ENDPOINT=http://otel-collector:4317
      # OIDC
      - OPENDUT_CARL_NETWORK_OIDC_ENABLED=true
      - OPENDUT_CARL_NETWORK_OIDC_CLIENT_ID=opendut-carl-client
      - OPENDUT_CARL_NETWORK_OIDC_CLIENT_SECRET
      - OPENDUT_CARL_NETWORK_OIDC_LEA_ISSUER_URL=https://auth.opendut.local/realms/opendut/
      - OPENDUT_CARL_NETWORK_OIDC_CLIENT_ISSUER_URL=https://auth.opendut.local/realms/opendut/
      - OPENDUT_CARL_NETWORK_OIDC_CLIENT_ISSUER_REMOTE_URL=https://auth.opendut.local/realms/opendut/
      - OPENDUT_CARL_NETWORK_OIDC_CLIENT_ISSUER_ADMIN_URL=https://auth.opendut.local/admin/realms/opendut/
      - OPENDUT_CARL_NETWORK_OIDC_CLIENT_SCOPES=
      # Persistence
      - OPENDUT_CARL_PERSISTENCE_ENABLED=true
      - OPENDUT_CARL_PERSISTENCE_DATABASE_URL=postgres://opendut-carl-postgres/carl
      - OPENDUT_CARL_PERSISTENCE_DATABASE_USERNAME=postgres
      - OPENDUT_CARL_PERSISTENCE_DATABASE_PASSWORD=$CARL_POSTGRES_PASSWORD

      - KEYCLOAK_URL=https://auth.opendut.local/
      - NETBIRD_MANAGEMENT_URL=https://netbird-api.opendut.local
      - NETBIRD_PASSWORD
    # https://docs.docker.com/reference/dockerfile/#healthcheck
    healthcheck:
      <<: *common-healthcheck-params
      test: [ "CMD-SHELL", "curl --fail --silent --resolve carl.opendut.local:443:127.0.0.1 --output /dev/null --noproxy '*' --insecure https://carl.opendut.local || exit 1" ]
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.carl.rule=HostSNI(`carl.opendut.local`)
      - traefik.tcp.routers.carl.tls.passthrough=true
      - traefik.tcp.services.carl.loadbalancer.server.port=443
    networks:
      opendut_local:
        aliases:
          - carl.opendut.local

  cleo:
    container_name: opendut-cleo
    build:
      context: ../../..
      dockerfile: ./.ci/deploy/localenv/data/cleo/Dockerfile
    restart: unless-stopped
    depends_on:
      carl:
        condition: service_healthy
    environment:
      # CLEO
      - OPENDUT_CLEO_NETWORK_CARL_HOST=carl.opendut.local
      - OPENDUT_CLEO_NETWORK_CARL_PORT=443
      - OPENDUT_CLEO_NETWORK_TLS_DOMAIN_NAME_OVERRIDE=carl.opendut.local  # default developer certificate is only valid for localhost
      - OPENDUT_CLEO_NETWORK_OIDC_ENABLED=true
      - OPENDUT_CLEO_NETWORK_OIDC_CLIENT_ID=opendut-cleo-client
      - OPENDUT_CLEO_NETWORK_OIDC_CLIENT_SECRET
      - OPENDUT_CLEO_NETWORK_OIDC_CLIENT_ISSUER_URL=https://auth.opendut.local/realms/opendut/
      - OPENDUT_CLEO_NETWORK_OIDC_CLIENT_SCOPES=
      - OPENDUT_CLEO_NETWORK_TLS_CA=/etc/opendut/tls/ca.pem
      - SSL_CERT_FILE=/etc/opendut/tls/ca.pem
    volumes:
      - "./data/secrets/pki/insecure-development-ca.pem:/etc/opendut/tls/ca.pem"
    networks:
      - opendut_local

  nginx-webdav:
    container_name: opendut-nginx-webdav
    build:
      context: ../../..
      dockerfile: ./.ci/deploy/localenv/data/nginx-webdav/Dockerfile
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
    volumes:
      - opendut_nginx-webdav:/media/data
    healthcheck:
      <<: *common-healthcheck-params
      test: [ "CMD-SHELL", "curl --fail --silent --output /dev/null --noproxy '*' http://localhost || exit 1" ]
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx-webdav.rule=Host(`nginx-webdav.opendut.local`)
      - traefik.http.routers.nginx-webdav.tls=true
      - traefik.http.services.nginx-webdav.loadbalancer.server.port=80
      - logging=promtail
      - logging_job=nginx-webdav

    networks:
      opendut_local:
        aliases:
          - nginx-webdav.opendut.local


  prometheus:
    container_name: opendut-prometheus
    image: prom/prometheus:v2.51.1
    command: [ "--config.file=/etc/prometheus/prometheus.yml", "--web.enable-remote-write-receiver", "--enable-feature=exemplar-storage" ]
    restart: always
    volumes:
      - ./data/telemetry/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - opendut_local

  tempo:
    container_name: opendut-tempo
    image: grafana/tempo:2.4.1
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./data/telemetry/tempo.yml:/etc/tempo.yml
      - tempo-data:/tmp/tempo
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --proxy off --no-verbose --tries=1 --spider http://tempo:3200/status || exit 1
    networks:
      - opendut_local

  loki:
    container_name: opendut-loki
    image: grafana/loki:2.9.6
    volumes:
      - ./data/telemetry/loki.yml:/etc/loki/loki.yml
      - loki-data:/loki
    command: [ "-config.file=/etc/loki/loki.yml", "-config.expand-env=true" ]
    healthcheck:
      test: wget --proxy off --no-verbose --tries=1 --spider http://loki:3100/ready || exit 1
      interval: 10s
      timeout: 7s
      retries: 5
    networks:
      - opendut_local

  promtail:
    container_name: opendut-promtail
    image: grafana/promtail:2.9.6
    volumes:
      - ./data/telemetry/promtail.yml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
    networks:
      - opendut_local

  otel-collector:
    container_name: opendut-otel-collector
    volumes:
      - ./data/telemetry/otel-collector.yml:/etc/collector-gateway.yaml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/secrets/pki/insecure-development-ca.pem:/pki/insecure-development-ca.pem:ro
    build:
      context: ../../..
      dockerfile: ./.ci/deploy/localenv/data/telemetry/Dockerfile_otel-collector
      args:
        OTEL_COLLECTOR_VERSION: 0.97.0
    environment:
      - "SSL_CERT_FILE=/pki/insecure-development-ca.pem"
    command: [ "--config=/etc/collector-gateway.yaml" ]
    user: "0"  # root required to access docker socket
    depends_on:
      tempo:
        condition: service_started
      loki:
        condition: service_started
      keycloak:
        condition: service_healthy
    restart: on-failure
    labels:
      - traefik.enable=true
      # OpenTelemetry GRPC endpoint
      - traefik.http.routers.otel-collector-grpc.rule=Host(`opentelemetry.opendut.local`)
      - traefik.http.routers.otel-collector-grpc.tls=true
      - traefik.http.routers.otel-collector-grpc.service=otel-collector-grpc
      - traefik.http.services.otel-collector-grpc.loadbalancer.server.port=4317
      - traefik.http.services.otel-collector-grpc.loadbalancer.server.scheme=h2c
      # Health check endpoint
      - traefik.http.routers.otel-collector-health.rule=Host(`opentelemetry.opendut.local`) && PathPrefix(`/health`)
      - traefik.http.routers.otel-collector-health.tls=true
      - traefik.http.routers.otel-collector-health.service=otel-collector-health
      - traefik.http.services.otel-collector-health.loadbalancer.server.port=13133
    networks:
      - opendut_local

  grafana:
    container_name: opendut-grafana
    image: grafana/grafana:10.4.1
    restart: unless-stopped
    depends_on:
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
      prometheus:
        condition: service_started
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#override-configuration-with-environment-variables
      - GF_SECURITY_ADMIN_PASSWORD
      - GF_SECURITY_SECRET_KEY
    healthcheck:
      <<: *common-healthcheck-params
      test: [ "CMD-SHELL", "curl --silent --output /dev/null --fail http://localhost || exit 1" ]
    volumes:
      - ./data/telemetry/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./data/telemetry/grafana/dashboards:/var/lib/grafana/dashboards
      - ./data/telemetry/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./data/telemetry/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/ds.yaml
      - grafana-storage:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`monitoring.opendut.local`)
      - traefik.http.routers.grafana.tls=true
      - traefik.http.services.grafana.loadbalancer.server.port=80
    networks:
      - opendut_local

  grafana_users:
    container_name: opendut-grafana-users
    image: alpine:latest
    depends_on:
      grafana:
        condition: service_healthy
    environment:
      - OPENDUT_USER_OPENDUT
      - GF_SECURITY_ADMIN_PASSWORD
    command: >
      sh -c "apk --no-cache add curl && sleep 5 && curl -v --noproxy '*' -X POST -u admin:$GF_SECURITY_ADMIN_PASSWORD \
      -H \"Accept: application/json\" \
      -H \"Content-Type: application/json\" \
      -d '{\"name\": \"openDuT\", \"login\": \"opendut\", \"password\": \"$OPENDUT_USER_OPENDUT\", \"OrgId\": 1}' \
      http://grafana:80/api/admin/users"
    networks:
      - opendut_local

volumes:
  keycloak_postgres_data:
  keycloak_postgres_backup:
  netbird-mgmt-data:
  netbird-mgmt-config:
  netbird-signal:
  carl_postgres_data:
  carl-config:
  opendut_nginx-webdav:
  tempo-data:
  loki-data:
  grafana-storage:

networks:
  opendut_local:
    name: local
    ipam:
      driver: default
      config:
        - subnet: 192.168.32.0/24
          ip_range: 192.168.32.0/24

