syntax = "proto3";

package opendut.types.peer;

import "opendut/types/cluster/cluster.proto";
import "opendut/types/util/net.proto";

message PeerState {
  oneof inner {
    PeerStateDown down = 1;
    PeerStateUp up = 2;
  }
}

message PeerStateDown {}

message PeerStateUp {
  oneof inner {
    PeerStateUpAvailable available = 1;
    PeerStateUpBlocked blocked = 2;
  }
  opendut.types.util.IpAddress remote_host = 10;
}

message PeerStateUpAvailable {}

message PeerStateUpBlocked {
  oneof inner {
    PeerStateUpBlockedDeploying deploying = 1;
    PeerStateUpBlockedMember member = 2;
    PeerStateUpBlockedUndeploying undeploying = 3;
  }
  opendut.types.cluster.ClusterId by_cluster = 10;
}

message PeerStateUpBlockedDeploying {}

message PeerStateUpBlockedMember {}

message PeerStateUpBlockedUndeploying {}
